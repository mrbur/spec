// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FullName.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FullName_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FullName_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FullName_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FullName_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FullName_2eproto;
class FullName;
class FullNameDefaultTypeInternal;
extern FullNameDefaultTypeInternal _FullName_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FullName* Arena::CreateMaybeMessage<::FullName>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FullName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FullName) */ {
 public:
  inline FullName() : FullName(nullptr) {}
  virtual ~FullName();

  FullName(const FullName& from);
  FullName(FullName&& from) noexcept
    : FullName() {
    *this = ::std::move(from);
  }

  inline FullName& operator=(const FullName& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullName& operator=(FullName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FullName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullName* internal_default_instance() {
    return reinterpret_cast<const FullName*>(
               &_FullName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FullName& a, FullName& b) {
    a.Swap(&b);
  }
  inline void Swap(FullName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FullName* New() const final {
    return CreateMaybeMessage<FullName>(nullptr);
  }

  FullName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FullName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FullName& from);
  void MergeFrom(const FullName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FullName";
  }
  protected:
  explicit FullName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FullName_2eproto);
    return ::descriptor_table_FullName_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kSecondNameFieldNumber = 2,
    kFathersNameFieldNumber = 3,
  };
  // string firstName = 1;
  void clear_firstname();
  const std::string& firstname() const;
  void set_firstname(const std::string& value);
  void set_firstname(std::string&& value);
  void set_firstname(const char* value);
  void set_firstname(const char* value, size_t size);
  std::string* mutable_firstname();
  std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string secondName = 2;
  void clear_secondname();
  const std::string& secondname() const;
  void set_secondname(const std::string& value);
  void set_secondname(std::string&& value);
  void set_secondname(const char* value);
  void set_secondname(const char* value, size_t size);
  std::string* mutable_secondname();
  std::string* release_secondname();
  void set_allocated_secondname(std::string* secondname);
  private:
  const std::string& _internal_secondname() const;
  void _internal_set_secondname(const std::string& value);
  std::string* _internal_mutable_secondname();
  public:

  // string fathersName = 3;
  void clear_fathersname();
  const std::string& fathersname() const;
  void set_fathersname(const std::string& value);
  void set_fathersname(std::string&& value);
  void set_fathersname(const char* value);
  void set_fathersname(const char* value, size_t size);
  std::string* mutable_fathersname();
  std::string* release_fathersname();
  void set_allocated_fathersname(std::string* fathersname);
  private:
  const std::string& _internal_fathersname() const;
  void _internal_set_fathersname(const std::string& value);
  std::string* _internal_mutable_fathersname();
  public:

  // @@protoc_insertion_point(class_scope:FullName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fathersname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FullName_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FullName

// string firstName = 1;
inline void FullName::clear_firstname() {
  firstname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FullName::firstname() const {
  // @@protoc_insertion_point(field_get:FullName.firstName)
  return _internal_firstname();
}
inline void FullName::set_firstname(const std::string& value) {
  _internal_set_firstname(value);
  // @@protoc_insertion_point(field_set:FullName.firstName)
}
inline std::string* FullName::mutable_firstname() {
  // @@protoc_insertion_point(field_mutable:FullName.firstName)
  return _internal_mutable_firstname();
}
inline const std::string& FullName::_internal_firstname() const {
  return firstname_.Get();
}
inline void FullName::_internal_set_firstname(const std::string& value) {
  
  firstname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FullName::set_firstname(std::string&& value) {
  
  firstname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FullName.firstName)
}
inline void FullName::set_firstname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firstname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FullName.firstName)
}
inline void FullName::set_firstname(const char* value,
    size_t size) {
  
  firstname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FullName.firstName)
}
inline std::string* FullName::_internal_mutable_firstname() {
  
  return firstname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FullName::release_firstname() {
  // @@protoc_insertion_point(field_release:FullName.firstName)
  return firstname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FullName::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FullName.firstName)
}

// string secondName = 2;
inline void FullName::clear_secondname() {
  secondname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FullName::secondname() const {
  // @@protoc_insertion_point(field_get:FullName.secondName)
  return _internal_secondname();
}
inline void FullName::set_secondname(const std::string& value) {
  _internal_set_secondname(value);
  // @@protoc_insertion_point(field_set:FullName.secondName)
}
inline std::string* FullName::mutable_secondname() {
  // @@protoc_insertion_point(field_mutable:FullName.secondName)
  return _internal_mutable_secondname();
}
inline const std::string& FullName::_internal_secondname() const {
  return secondname_.Get();
}
inline void FullName::_internal_set_secondname(const std::string& value) {
  
  secondname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FullName::set_secondname(std::string&& value) {
  
  secondname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FullName.secondName)
}
inline void FullName::set_secondname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secondname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FullName.secondName)
}
inline void FullName::set_secondname(const char* value,
    size_t size) {
  
  secondname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FullName.secondName)
}
inline std::string* FullName::_internal_mutable_secondname() {
  
  return secondname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FullName::release_secondname() {
  // @@protoc_insertion_point(field_release:FullName.secondName)
  return secondname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FullName::set_allocated_secondname(std::string* secondname) {
  if (secondname != nullptr) {
    
  } else {
    
  }
  secondname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secondname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FullName.secondName)
}

// string fathersName = 3;
inline void FullName::clear_fathersname() {
  fathersname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FullName::fathersname() const {
  // @@protoc_insertion_point(field_get:FullName.fathersName)
  return _internal_fathersname();
}
inline void FullName::set_fathersname(const std::string& value) {
  _internal_set_fathersname(value);
  // @@protoc_insertion_point(field_set:FullName.fathersName)
}
inline std::string* FullName::mutable_fathersname() {
  // @@protoc_insertion_point(field_mutable:FullName.fathersName)
  return _internal_mutable_fathersname();
}
inline const std::string& FullName::_internal_fathersname() const {
  return fathersname_.Get();
}
inline void FullName::_internal_set_fathersname(const std::string& value) {
  
  fathersname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FullName::set_fathersname(std::string&& value) {
  
  fathersname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FullName.fathersName)
}
inline void FullName::set_fathersname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fathersname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FullName.fathersName)
}
inline void FullName::set_fathersname(const char* value,
    size_t size) {
  
  fathersname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FullName.fathersName)
}
inline std::string* FullName::_internal_mutable_fathersname() {
  
  return fathersname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FullName::release_fathersname() {
  // @@protoc_insertion_point(field_release:FullName.fathersName)
  return fathersname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FullName::set_allocated_fathersname(std::string* fathersname) {
  if (fathersname != nullptr) {
    
  } else {
    
  }
  fathersname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fathersname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FullName.fathersName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FullName_2eproto
